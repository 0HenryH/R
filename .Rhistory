library('fda')
?fdpar
library(fda)
?fdpar
fdParobj = fdPar(daybasis365,Lfdobj=int2Lfd(2),lambda=1e4)
library(fda)
?fdPar
?int2Lfd
#The first argument is basis function, second is to define the roughness penalty(here is second derivative),third is the penalty coefficiency
#fdPar create an object which store these definations
y = CanadianWeather(,"Vancouver","Temperature.C")
#The first argument is basis function, second is to define the roughness penalty(here is second derivative),third is the penalty coefficiency
#fdPar create an object which store these definations
y = CanadianWeather$dailyAv(,"Vancouver","Temperature.C")
fdParobj = fdPar[daybasis365,Lfdobj=int2Lfd(2),lambda=1e4]
#The first argument is basis function, second is to define the roughness penalty(here is second derivative),third is the penalty coefficiency
#fdPar create an object which store these definations
y = CanadianWeather$dailyAv[,"Vancouver","Temperature.C"]
?create.fourier.basis
daybasis365 = create.fourier.basis(rangeval = c(1,365),nbasis = 365)
fdParobj = fdPar(daybasis365,Lfdobj=int2Lfd(2),lambda=1e4)
?smooth.basis
str(precfd)
precfd = smooth.basis(1:365,y,fdParobj)
str(precfd)
str(precfd$fd)
head(precfd$fd)
View(precfd)
plot(1:365,y,col=2,xlab='day',ylab='precipitation',main='Vancouver',
cex.lab=1.5,cex.axis=1.5)
lines(precfd$fd,lwd=2,col=4)
ggplot(precfd,aes(x = 1:365,y = precfd$fd)) + geom_point()
library(ggplot2)
ggplot(precfd,aes(x = 1:365,y = precfd$fd)) + geom_point()
windows()
plot(1:365,y,col=2,xlab='day',ylab='precipitation',main='Vancouver',
cex.lab=1.5,cex.axis=1.5)
lines(precfd$fd,lwd=2,col=4)
?lines
library('fda')
y = CanadianWeather$dailyAv[,'Vancouver','Precipitation.mm']
for(i in c(7,13,21,31,51,101,181)){
daybasis365 <- create.fourier.basis(c(0, 365),i)
bvals = eval.basis(1:365,daybasis365)
# Evaluate the first derivative of the basis functions at 1,2,...,365
d1bvals = eval.basis(1:365,daybasis365,Lfdobj=1)
# Evaluate the second derivative of the basis functions at 1,2,...,365
d2bvals = eval.basis(1:365,daybasis365,Lfdobj=2)
X = bvals
yhat = X%*%solve(t(X)%*%X)%*%(t(X)%*%y)
# Estimate the second derivative of f(t)
d2yhat = d2bvals%*%solve(t(X)%*%X)%*%(t(X)%*%y)
windows()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
title = paste(i,' Basis Functions',sep='')
plot(1:365,y,col=2,cex=1.5,xlab='day',ylab='precipitation',cex.lab=1.5,
main=title,cex.axis=1.5)
lines(1:365,yhat,lwd=2,col=4)
windows()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:365,d2yhat,col=4,type='l',lwd=2,cex.lab=1.5,cex.axis=1.5,
ylab = 'D2 precipitation',xlab='day',main=title)
readline(prompt="Press [enter] to continue")
}
install.packages('psych')
library('fda')
y = CanadianWeather$dailyAv[,'Vancouver','Precipitation.mm']
for(i in c(7,13,21,31,51,101,181)){
daybasis365 <- create.fourier.basis(c(0, 365),i)
bvals = eval.basis(1:365,daybasis365)
# Evaluate the first derivative of the basis functions at 1,2,...,365
d1bvals = eval.basis(1:365,daybasis365,Lfdobj=1)
# Evaluate the second derivative of the basis functions at 1,2,...,365
d2bvals = eval.basis(1:365,daybasis365,Lfdobj=2)
X = bvals
yhat = X%*%solve(t(X)%*%X)%*%(t(X)%*%y)
# Estimate the second derivative of f(t)
d2yhat = d2bvals%*%solve(t(X)%*%X)%*%(t(X)%*%y)
windows()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
title = paste(i,' Basis Functions',sep='')
plot(1:365,y,col=2,cex=1.5,xlab='day',ylab='precipitation',cex.lab=1.5,
main=title,cex.axis=1.5)
lines(1:365,yhat,lwd=2,col=4)
windows()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:365,d2yhat,col=4,type='l',lwd=2,cex.lab=1.5,cex.axis=1.5,
ylab = 'D2 precipitation',xlab='day',main=title)
readline(prompt="Press [enter] to continue")
}
#install.packages('psych')
library(psych)
tr(S)
err = (y-yhat)
sig = sum( (y-yhat)^2 )/(365-13)
# Variance-covariance matrix of fhat
Sig = sig*S%*%t(S)
# 2 * standard error of fitted curve
off = 2*sqrt(diag(Sig))
windows()
plot(1:365,y,col=2,xlab='day',ylab='precipitation',cex.lab=1.5,cex.axis=1.5,main='Vancouver')
lines(1:365,yhat,col=4,lwd=2)
lines(1:365,yhat+off,col=4,lwd=2,lty=2)
lines(1:365,yhat-off,col=4,lwd=2,lty=2)
daybasis365 <- create.fourier.basis(c(0, 365),13)
bvals = eval.basis(1:365,daybasis365)
tbvals = bvals
S = tbvals%*%solve( t(tbvals)%*%tbvals )%*%t(tbvals)
yhat = S%*%y
library(psych)
tr(S)
err = (y-yhat)
sig = sum( (y-yhat)^2 )/(365-13)
# Variance-covariance matrix of fhat
Sig = sig*S%*%t(S)
# 2 * standard error of fitted curve
off = 2*sqrt(diag(Sig))
fdParobj = fdPar(daybasis365,Lfdobj=int2Lfd(2),lambda=1e4)
precfd = smooth.basis(1:365,y,fdParobj)
windows()
plot(1:365,y,col=2,xlab='day',ylab='precipitation',main='Vancouver',
cex.lab=1.5,cex.axis=1.5)
lines(precfd$fd,lwd=2,col=4) #why lines can deal with data of class fdSmooth?
infMat = bvals%*%precfd$y2cMap
matplot(infMat[,c(20,180,300)],type='l',ylab='influence',xlab='day',
main='Observations 20, 180, 300',cex.lab=1.5,cex.axis=1.5,lwd=2)
summary(infMat)
?eval.fd
str(harmfdvals)
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,0), c(0, 365))
harmfdvals = eval.fd(1:365,precfd$fd,harmLfd)
str(harmfdvals)
windows()
plot(1:365,harmfdvals,type='l',lwd=2,col=4,xlab='day',ylab='Harmonic Acceleration',
main ='Vancouver',cex.lab=1.5,cex.axis=1.5)
str(precfd$fd)
View(precfd)
head(precfd$fd)
windows()
plot(1:365,harmfdvals,type='l',lwd=2,col=4,xlab='day',ylab='Harmonic Acceleration',
main ='Vancouver',cex.lab=1.5,cex.axis=1.5)
precfd = smooth.basis(1:365,y,harmLfd)
?vec2Lfd
